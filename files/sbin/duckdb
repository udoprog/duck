#!/usr/bin/python
#
# AutoDB is used to store duckinstaller variables.
#

import duck.db as duck_db
import duck

import argparse
import urllib2
import json
import contextlib

VERSION = duck.__version_string__


def update_db(function):
    def inner(ns):
        with ns.db.open() as S:
            for key, value in function(S, ns):
                if ns.ns:
                    key = "%s/%s" % (ns.ns, key)
                S.set(key, value)

        return 0

    return inner


def parse_text(fd):
    for line in fd:
        line = line.strip()

        if line.startswith("#") or not line:
            continue

        key, value = line.split(" ", 2)
        yield key, value


def flatten_dict(doc, keys=[]):
    result = dict()

    for key, value in doc.items():
        this_keys = keys + [key]

        if isinstance(value, dict):
            result.update(flatten_dict(value, this_keys))
        else:
            result["/".join(this_keys)] = value

    return result


def parse_json(fd):
    doc = json.load(fd)

    for key, value in doc.items():
        yield key, value


def parse_cmdline(fd):
    cmdline = fd.read()

    for c in cmdline.split(" "):
        c = c.strip()

        if not c or '=' not in c:
            continue

        key, value = c.split("=", 2)
        yield key, value


def read_dict(mode, fd):
    if mode == 'cmdline':
        return parse_cmdline(fd)

    if mode == 'json':
        return parse_json(fd)

    if mode == 'text':
        return parse_text(fd)

    raise Exception("Unknown file mode: {0}".format(mode))


def read(ns, fd):
    value = dict(read_dict(ns.mode, fd))

    if ns.flatten:
        return flatten_dict(value)

    return value


def action_get(ns):
    with ns.db.open() as S:
        value = S.get(ns.key, ns.default)

        if value is None:
            ok = False
            value = ""
        else:
            ok = True

        if ns.sh:
            print "DUCK_RETURN=\'%s\';" % (value,)
            print "DUCK_OK=\"%s\"" % ("yes" if ok else "no",)
            return 0

        if not ok:
            return 1

        if ns.raw:
            value = repr(value)

        print value

    return 0


@update_db
def action_set(S, ns):
    if ns.json:
        value = json.loads(ns.value)
    elif ns.value == '-':
        value = sys.stdin.read()
    else:
        value = ns.value

    yield ns.key, value


@update_db
def action_url(S, ns):
    with contextlib.closing(urllib2.urlopen(ns.url)) as fd:
        for key, value in read(ns, fd).items():
            yield key, value


def action_list(ns):
    with ns.db.open() as S:
        for key in S.keys():
            print key, repr(S.get(key))


def main(args):
    parser = argparse.ArgumentParser(
        usage="usage: %(prog)s [options] <action> [action-options]")

    parser.add_argument("-v", "--version", action='version', version=VERSION)

    parser.add_argument(
        "--db",
        metavar="<path>",
        default=None)

    parser.add_argument(
        "--ns",
        metavar="<namespace>",
        default=None)

    parsers = parser.add_subparsers()

    get_parser = parsers.add_parser("get", help="Get a value")
    get_parser.add_argument("key")
    get_parser.add_argument("default", nargs='?', default=None)
    get_parser.add_argument("--sh",
                            help=("Output return value as a shell "
                                  "evaluable string"),
                            default=False,
                            action='store_true')
    get_parser.add_argument("--raw",
                            help=("Output raw (repr) value"),
                            default=False,
                            action='store_true')
    get_parser.set_defaults(action=action_get)

    set_parser = parsers.add_parser("set", help="Set a value")
    set_parser.add_argument("--json",
                            help="treat argument as json",
                            default=False,
                            action='store_true')
    set_parser.add_argument("key")
    set_parser.add_argument("value")
    set_parser.set_defaults(action=action_set)

    list_parser = parsers.add_parser("list", help="List all values")
    list_parser.set_defaults(action=action_list)

    url_parser = parsers.add_parser("url",
                                    help="Read values from an url")
    url_parser.add_argument("url", help="Fetch values from specified url")
    url_parser.add_argument("--json", dest='mode',
                            help="Treat input as a json document",
                            action='store_const', const='json')
    url_parser.add_argument("--cmdline", dest='mode',
                            help="Treat input as a /proc/cmdline file",
                            action='store_const', const='cmdline')
    url_parser.add_argument("--flatten",
                            help="Flatten a nested dictionary",
                            default=False, action='store_true')
    url_parser.set_defaults(action=action_url, mode='file')

    ns = parser.parse_args(args)
    ns.db = duck_db.DB(path=ns.db)
    return ns.action(ns)

if __name__ == "__main__":
    import sys
    sys.exit(main(sys.argv[1:]))
